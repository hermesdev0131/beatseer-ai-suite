import json
import logging
from datetime import datetime
from typing import Dict, Any
from pathlib import Path

logger = logging.getLogger(__name__)

class ReportGenerator:
    """Generate professional reports from analysis results"""
    
    def __init__(self, config):
        self.config = config
        self.reports_dir = config.REPORTS_DIR
        self.reports_dir.mkdir(exist_ok=True, parents=True)
    
    def _generate_html_report(self, results):
        """Generate comprehensive HTML report with executive narrative"""
        
        # HTML template with executive narrative prominently displayed
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Music Intelligence Report - Powered by Beatseer AIâ„¢</title>
            <style>
                /* Professional styling */
                body {{
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #1e3c72 0%, #2a5298 50%, #7e8ba3 100%);
                    color: white;
                    padding: 40px;
                }}
                .container {{
                    max-width: 1400px;
                    margin: 0 auto;
                    background: rgba(255, 255, 255, 0.1);
                    backdrop-filter: blur(20px);
                    border-radius: 30px;
                    padding: 50px;
                }}
                .header {{
                    text-align: center;
                    margin-bottom: 50px;
                }}
                h1 {{
                    font-size: 3.5rem;
                    background: linear-gradient(135deg, #00ff88 0%, #00d4ff 100%);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                }}
                .subtitle {{
                    font-size: 1.5rem;
                    color: #00ff88;
                    margin: 20px 0;
                }}
                .beatseer-badge {{
                    display: inline-block;
                    background: rgba(0, 255, 136, 0.2);
                    border: 2px solid #00ff88;
                    padding: 10px 30px;
                    border-radius: 30px;
                    color: #00ff88;
                    font-weight: bold;
                }}
                .executive-narrative {{
                    background: linear-gradient(135deg, rgba(0,255,136,0.1) 0%, rgba(0,212,255,0.1) 100%);
                    border: 2px solid #00ff88;
                    border-radius: 20px;
                    padding: 40px;
                    margin: 40px 0;
                }}
                .narrative-header {{
                    font-size: 2rem;
                    color: #00ff88;
                    margin-bottom: 30px;
                }}
                .metrics-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 20px;
                    margin: 30px 0;
                }}
                .metric-card {{
                    background: rgba(255, 255, 255, 0.1);
                    padding: 20px;
                    border-radius: 15px;
                    text-align: center;
                }}
                .metric-value {{
                    font-size: 2.5rem;
                    color: #00ff88;
                    font-weight: bold;
                }}
                .metric-label {{
                    margin-top: 10px;
                    opacity: 0.9;
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>Music Intelligence Report</h1>
                    <div class="subtitle">Hit Prediction â€¢ Sync Licensing â€¢ Investment Analysis</div>
                    <div class="beatseer-badge">Powered by Beatseer AIâ„¢</div>
                </div>
                
                <div class="executive-narrative">
                    <h2 class="narrative-header">ðŸŽ¯ Beatseer AI Executive Intelligence Brief</h2>
                    <div style="line-height: 1.8; font-size: 1.1rem;">
                        {results.get('executive_narrative', '').replace(chr(10), '<br>')}
                    </div>
                </div>
                
                <!-- Add metrics, charts, and detailed analysis here -->
                
                <div style="text-align: center; margin-top: 50px; padding-top: 30px; border-top: 2px solid rgba(255,255,255,0.2);">
                    <p style="opacity: 0.8;">Generated by Beatseer AIâ„¢ Music Intelligence Suite</p>
                    <p style="opacity: 0.6;">47+ Audio Features â€¢ 95% Accuracy â€¢ {datetime.now().strftime('%B %d, %Y at %I:%M %p')}</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        return html

    
    def _generate_album_metrics_html(self, results: Dict) -> str:
        """Generate album metrics HTML"""
        metrics = results.get('album_metrics', {})
        analysis = results.get('album_analysis', {})
        
        return f"""
        <div class="section">
            <h2 class="section-title">Executive Metrics</h2>
            <div class="metrics-grid">
                <div class="metric-card">
                    <div class="metric-value">{metrics.get('average_hit_probability', 0):.0f}%</div>
                    <div class="metric-label">Average Hit Potential</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{analysis.get('overall_cohesion', 0):.0f}%</div>
                    <div class="metric-label">Album Cohesion</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{metrics.get('strong_tracks', 0)}</div>
                    <div class="metric-label">Strong Tracks</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{analysis.get('primary_genre', 'Unknown').title()}</div>
                    <div class="metric-label">Primary Genre</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{metrics.get('commercial_potential', 0):.0f}%</div>
                    <div class="metric-label">Commercial Potential</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{metrics.get('album_strength', 'Unknown')}</div>
                    <div class="metric-label">Album Rating</div>
                </div>
            </div>
        </div>
        """
    
    def _generate_batch_metrics_html(self, results: Dict) -> str:
        """Generate batch metrics HTML"""
        metrics = results.get('batch_metrics', {})
        
        return f"""
        <div class="section">
            <h2 class="section-title">Portfolio Metrics</h2>
            <div class="metrics-grid">
                <div class="metric-card">
                    <div class="metric-value">{metrics.get('average_hit_potential', 0):.0f}%</div>
                    <div class="metric-label">Average Hit Potential</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{metrics.get('signable_tracks', 0)}</div>
                    <div class="metric-label">Signable Tracks</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{metrics.get('total_portfolio_value', 'Unknown')}</div>
                    <div class="metric-label">Portfolio Value</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{metrics.get('roi_projection', 'Unknown')}</div>
                    <div class="metric-label">ROI Projection</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{metrics.get('production_ready', 0)}</div>
                    <div class="metric-label">Production Ready</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{metrics.get('viral_candidates', 0)}</div>
                    <div class="metric-label">Viral Candidates</div>
                </div>
            </div>
        </div>
        """
    
    def _generate_album_details_html(self, results: Dict) -> str:
        """Generate album details HTML"""
        singles = results.get('singles', {})
        tracks = results.get('track_results', [])
        
        singles_html = ""
        if singles.get('lead_single'):
            singles_html += f"""
            <div class="section">
                <h2 class="section-title">Recommended Singles</h2>
                <table>
                    <tr>
                        <th>Position</th>
                        <th>Track</th>
                        <th>Hit Potential</th>
                        <th>Viral Score</th>
                        <th>Recommendation</th>
                    </tr>
                    <tr>
                        <td>Lead Single</td>
                        <td class="highlight">{singles['lead_single'].get('track', 'Unknown')}</td>
                        <td>{singles['lead_single'].get('hit_probability', 0):.0f}%</td>
                        <td>{singles['lead_single'].get('viral_score', 0):.0f}%</td>
                        <td>{singles['lead_single'].get('why', 'Strong potential')}</td>
                    </tr>
            """
            
            if singles.get('second_single'):
                singles_html += f"""
                    <tr>
                        <td>Second Single</td>
                        <td class="highlight">{singles['second_single'].get('track', 'Unknown')}</td>
                        <td>{singles['second_single'].get('hit_probability', 0):.0f}%</td>
                        <td>{singles['second_single'].get('viral_score', 0):.0f}%</td>
                        <td>{singles['second_single'].get('why', 'Good follow-up')}</td>
                    </tr>
                """
            
            singles_html += "</table></div>"
        
        # Track details
        tracks_html = """
        <div class="section">
            <h2 class="section-title">Track Analysis</h2>
            <table>
                <tr>
                    <th>#</th>
                    <th>Title</th>
                    <th>Hit %</th>
                    <th>Genre</th>
                    <th>Energy</th>
                    <th>Tempo</th>
                </tr>
        """
        
        for track in tracks[:10]:  # Limit to 10 tracks for display
            tracks_html += f"""
                <tr>
                    <td>{track.get('track_number', '')}</td>
                    <td>{track.get('title', 'Unknown')}</td>
                    <td class="highlight">{track.get('hit_probability', 0):.0f}%</td>
                    <td>{track.get('genre', 'Unknown').title()}</td>
                    <td>{track.get('energy', 0):.0f}%</td>
                    <td>{track.get('tempo', 0):.0f} BPM</td>
                </tr>
            """
        
        tracks_html += "</table></div>"
        
        return singles_html + tracks_html
    
    def _generate_batch_details_html(self, results: Dict) -> str:
        """Generate batch details HTML"""
        tracks = results.get('track_results', [])
        
        # Top opportunities
        tracks_html = """
        <div class="section">
            <h2 class="section-title">Top Opportunities</h2>
            <table>
                <tr>
                    <th>ID</th>
                    <th>Artist</th>
                    <th>Track</th>
                    <th>Hit %</th>
                    <th>Market Fit</th>
                    <th>Risk</th>
                    <th>Investment</th>
                </tr>
        """
        
        for track in tracks[:10]:  # Top 10
            tracks_html += f"""
                <tr>
                    <td>{track.get('submission_id', '')}</td>
                    <td>{track.get('artist', 'Unknown')}</td>
                    <td>{track.get('title', 'Unknown')}</td>
                    <td class="highlight">{track.get('hit_probability', 0):.0f}%</td>
                    <td>{track.get('market_fit', 'Unknown')}</td>
                    <td>{track.get('investment_risk', 'Unknown')}</td>
                    <td>{track.get('advance_range', 'TBD')}</td>
                </tr>
            """
        
        tracks_html += "</table></div>"
        
        return tracks_html
    
    def save_report(self, results: Dict[str, Any], format: str = 'html') -> Path:
        """Save report to file"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_type = results.get('analysis_type', 'report')
        
        if format == 'html':
            content = self.generate_html_report(results)
            filename = f"beatseer_{report_type}_{timestamp}.html"
            filepath = self.reports_dir / filename
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
        
        elif format == 'json':
            filename = f"beatseer_{report_type}_{timestamp}.json"
            filepath = self.reports_dir / filename
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, default=str)
        
        else:
            raise ValueError(f"Unsupported format: {format}")
        
        logger.info(f"Report saved to {filepath}")
        return filepath
